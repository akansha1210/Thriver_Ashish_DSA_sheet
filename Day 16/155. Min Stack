//STACK FRAMEWORK
class MinStack {
    private int min;
    private Stack<Integer>st;
    
    public MinStack() {
        min=Integer.MAX_VALUE;
        st=new Stack<>();
    }
    
    public void push(int val) {
        if(val<=min){
            st.push(min);
            min=val;
        }
        st.push(val);
    }
    
    public void pop() {
        if(st.pop()==min){
            min=st.pop();
        }
        
    }
    
    public int top() {
        return st.peek();
    }
    
    public int getMin() {
        return min;
    }
}
//Linked List
class MinStack {
    class Node{
        int val;
        int min;
        Node next;
        Node(int val,int min,Node next){
            this.val=val;
            this.min=min;
            this.next=next;
        }
    }
    private Node head;

    public MinStack() {
        head=null;
    }
    
    public void push(int val) {
        if(head==null) head=new Node(val,val,null);
        else head=new Node(val,Math.min(head.min,val),head);
    }
    
    public void pop() {
        head=head.next;
        
    }
    
    public int top() {
        return head.val;
    }
    
    public int getMin() {
        return head.min;
    }
}
